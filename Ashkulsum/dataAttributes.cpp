#include "stdafx.h"
#include "dataAttributes.h"

unsigned int DataAttributes::m_MapNumBytes [DP_MAX_CONTAINER_TYPE] = 
{
	0, //DP_UNKNOWN,
	16, //DP_R32G32B32A32_FLOAT,
	16, //DP_R32G32B32A32_UNSIGNED_INT,
	16, //DP_R32G32B32A32_SIGNED_INT,
	12, //DP_R32G32B32_FLOAT,
	12, //DP_R32G32B32_UNSIGNED_INT,
	12, //DP_R32G32B32_SIGNED_INT,
	8, //DP_R16G16B16A16_FLOAT,
	8, //DP_R16G16B16A16_UNSIGNED_INT,
	8, //DP_R16G16B16A16_UNSIGNED_NORM,
	8, //DP_R16G16B16A16_SIGNED_INT,
	8, //DP_R16G16B16A16_SIGNED_NORM,
	8, //DP_R32G32_FLOAT,
	8, //DP_R32G32_UNSIGNED_INT,
	8, //DP_R32G32_SIGNED_INT,
	4, //DP_R8G8B8A8_UNSIGNED_INT,
	4, //DP_R8G8B8A8_UNSIGNED_NORM,
	4, //DP_R8G8B8A8_SIGNED_INT,
	4, //DP_R8G8B8A8_SIGNED_NORM,
	4, //DP_R16G16_FLOAT,
	4, //DP_R16G16_UNSIGNED_INT,
	4, //DP_R16G16_SIGNED_INT,
	4, //DP_D32_FLOAT,
	4, //DP_R32_FLOAT,
	4, //DP_R32_UNSIGNED_INT,
	4, //DP_R32_SIGNED_INT,
	4, //DP_D24_UNSIGNED_NORM_S8_UNSIGNED_INT,
	2, //DP_R8G8_UNSIGNED_INT,
	2, //DP_R8G8_UNSIGNED_NORM,
	2, //DP_R8G8_SIGNED_INT,
	2, //DP_R8G8_SIGNED_NORM,
	2, //DP_R16_FLOAT,
	2, //DP_D16_UNSIGNED_NORM,
	2, //DP_R16_UNSIGNED_INT,
	2, //DP_R16_UNSIGNED_NORM,
	2, //DP_R16_SIGNED_INT,
	2, //DP_R16_SIGNED_NORM,
	1, //DP_R8_UNSIGNED_INT,
	1, //DP_R8_UNSIGNED_NORM,
	1, //DP_R8_SIGNED_INT,
	1, //DP_R8_SIGNED_NORM,
};

unsigned int DataAttributes::m_MapNumElement [DP_MAX_CONTAINER_TYPE] = 
{
	0, //DP_UNKNOWN,
	4, //DP_R32G32B32A32_FLOAT,
	4, //DP_R32G32B32A32_UNSIGNED_INT,
	4, //DP_R32G32B32A32_SIGNED_INT,
	3, //DP_R32G32B32_FLOAT,
	3, //DP_R32G32B32_UNSIGNED_INT,
	3, //DP_R32G32B32_SIGNED_INT,
	4, //DP_R16G16B16A16_FLOAT,
	4, //DP_R16G16B16A16_UNSIGNED_INT,
	4, //DP_R16G16B16A16_UNSIGNED_NORM,
	4, //DP_R16G16B16A16_SIGNED_INT,
	4, //DP_R16G16B16A16_SIGNED_NORM,
	2, //DP_R32G32_FLOAT,
	2, //DP_R32G32_UNSIGNED_INT,
	2, //DP_R32G32_SIGNED_INT,
	4, //DP_R8G8B8A8_UNSIGNED_INT,
	4, //DP_R8G8B8A8_UNSIGNED_NORM,
	4, //DP_R8G8B8A8_SIGNED_INT,
	4, //DP_R8G8B8A8_SIGNED_NORM,
	2, //DP_R16G16_FLOAT,
	2, //DP_R16G16_UNSIGNED_INT,
	2, //DP_R16G16_SIGNED_INT,
	1, //DP_D32_FLOAT,
	1, //DP_R32_FLOAT,
	1, //DP_R32_UNSIGNED_INT,
	1, //DP_R32_SIGNED_INT,
	2, //DP_R8G8_UNSIGNED_INT,
	2, //DP_R8G8_UNSIGNED_NORM,
	2, //DP_R8G8_SIGNED_INT,
	2, //DP_R8G8_SIGNED_NORM,
	1, //DP_R16_FLOAT,
	1, //DP_D16_UNSIGNED_NORM,
	1, //DP_R16_UNSIGNED_INT,
	1, //DP_R16_UNSIGNED_NORM,
	1, //DP_R16_SIGNED_INT,
	1, //DP_R16_SIGNED_NORM,
	1, //DP_R8_UNSIGNED_INT,
	1, //DP_R8_UNSIGNED_NORM,
	1, //DP_R8_SIGNED_INT,
	1, //DP_R8_SIGNED_NORM,
};

ElementType DataAttributes::m_MapElementType [DP_MAX_CONTAINER_TYPE] = 
{
	DP_NO_TYPE, //DP_UNKNOWN,
	DP_FLOAT, //DP_R32G32B32A32_FLOAT,
	DP_U_INT, //DP_R32G32B32A32_UNSIGNED_INT,
	DP_INT, //DP_R32G32B32A32_SIGNED_INT,
	DP_FLOAT, //DP_R32G32B32_FLOAT,
	DP_U_INT, //DP_R32G32B32_UNSIGNED_INT,
	DP_INT, //DP_R32G32B32_SIGNED_INT,
	DP_HALF, //DP_R16G16B16A16_FLOAT,
	DP_U_SHORT, //DP_R16G16B16A16_UNSIGNED_INT,
	DP_U_SHORT, //DP_R16G16B16A16_UNSIGNED_NORM,
	DP_SHORT, //DP_R16G16B16A16_SIGNED_INT,
	DP_SHORT, //DP_R16G16B16A16_SIGNED_NORM,
	DP_FLOAT, //DP_R32G32_FLOAT,
	DP_U_INT, //DP_R32G32_UNSIGNED_INT,
	DP_INT, //DP_R32G32_SIGNED_INT,
	DP_U_BYTE, //DP_R8G8B8A8_UNSIGNED_INT,
	DP_U_BYTE, //DP_R8G8B8A8_UNSIGNED_NORM,
	DP_BYTE, //DP_R8G8B8A8_SIGNED_INT,
	DP_BYTE, //DP_R8G8B8A8_SIGNED_NORM,
	DP_HALF, //DP_R16G16_FLOAT,
	DP_U_SHORT, //DP_R16G16_UNSIGNED_INT,
	DP_SHORT, //DP_R16G16_SIGNED_INT,
	DP_FLOAT, //DP_R32_FLOAT,
	DP_FLOAT, //DP_D32_FLOAT,
	DP_U_INT, //DP_R32_UNSIGNED_INT,
	DP_INT, //DP_R32_SIGNED_INT,
	DP_U_INT, //DP_D24_UNSIGNED_NORM_S8_UNSIGNED_INT,
	DP_U_BYTE, //DP_R8G8_UNSIGNED_INT,
	DP_U_BYTE,//DP_R8G8_UNSIGNED_NORM,
	DP_BYTE, //DP_R8G8_SIGNED_INT,
	DP_BYTE, //DP_R8G8_SIGNED_NORM,
	DP_HALF, //DP_R16_FLOAT,
	DP_U_SHORT, //DP_D16_UNSIGNED_NORM,
	DP_U_SHORT, //DP_R16_UNSIGNED_INT,
	DP_U_SHORT, //DP_R16_UNSIGNED_NORM,
	DP_SHORT, //DP_R16_SIGNED_INT,
	DP_SHORT, //DP_R16_SIGNED_NORM,
	DP_U_BYTE, //DP_R8_UNSIGNED_INT,
	DP_U_BYTE, //DP_R8_UNSIGNED_NORM,
	DP_BYTE, //DP_R8_SIGNED_INT,
	DP_BYTE, //DP_R8_SIGNED_NORM,
};
unsigned int DataAttributes::GetNumBytes (ContainerType containerType)
{
	return m_MapNumBytes [containerType];
}

unsigned int DataAttributes::GetNumElement (ContainerType containerType)
{
	return m_MapNumElement [containerType];
}

ElementType DataAttributes::GetElementType (ContainerType type)
{
	return m_MapElementType[type];
}

bool DataAttributes::IsDepthFormat (ContainerType type)
{
	return type == DP_D32_FLOAT || type == DP_D24_UNSIGNED_NORM_S8_UNSIGNED_INT || type == DP_D16_UNSIGNED_NORM; 
}